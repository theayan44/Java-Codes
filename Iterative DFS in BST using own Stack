import java.io.*;
import java.util.*;

public class Main
{
    public static class Node {
        int data;
        Node left;
        Node right;
    
        Node(int data, Node left, Node right) {
          this.data = data;
          this.left = left;
          this.right = right;
        }
    }
    
    public static class Pair {
        Node node;
        int state;
    
        Pair(Node node, int state) {
          this.node = node;
          this.state = state;
        }
    }
    
    public static Node construct(Integer[] arr) {
        Node root = new Node(arr[0], null, null);
        Pair rtp = new Pair(root, 1);
    
        Stack<Pair> st = new Stack<>();
        st.push(rtp);
    
        int idx = 0;
        while (st.size() > 0) {
          Pair top = st.peek();
          if (top.state == 1) {
            idx++;
            if (arr[idx] != null) {
              top.node.left = new Node(arr[idx], null, null);
              Pair lp = new Pair(top.node.left, 1);
              st.push(lp);
            } else {
              top.node.left = null;
            }
    
            top.state++;
          } else if (top.state == 2) {
            idx++;
            if (arr[idx] != null) {
              top.node.right = new Node(arr[idx], null, null);
              Pair rp = new Pair(top.node.right, 1);
              st.push(rp);
            } else {
              top.node.right = null;
            }
    
            top.state++;
          } else {
            st.pop();
          }
        }
    
        return root;
    }
    
    public static void iterativeDFS(Node root){
	    Stack<Pair> st = new Stack<>();
	    ArrayList<Integer> pre = new ArrayList<>();
	    ArrayList<Integer> in = new ArrayList<>();
	    ArrayList<Integer> post = new ArrayList<>();
	    st.push(new Pair(root, 1));
	    while(st.size() > 0){
	        Pair currPair = st.peek();
	        if(currPair.state == 1){
	            //Pre-Order
	            pre.add(currPair.node.data);
	            if(currPair.node.left != null)
	                st.push(new Pair(currPair.node.left, 1));
	            currPair.state++;
	        }else if(currPair.state == 2){
	            //In-Order
	            in.add(currPair.node.data);
	            if(currPair.node.right != null)
	                st.push(new Pair(currPair.node.right, 1));
	            currPair.state++;
	        }else{
	            //Post-Order
	            post.add(currPair.node.data);
	            st.pop();
	        }
	    }
	    System.out.println(pre);
	    System.out.println(in);
	    System.out.println(post);
	}

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());//Input --> 50 25 12 n n 37 30 n n n 75 62 n 70 n n 87 n n
        Integer[] arr = new Integer[n];
        String[] values = br.readLine().split(" ");
        for (int i = 0; i < n; i++) {
          if (values[i].equals("n") == false) {
            arr[i] = Integer.parseInt(values[i]);
          } else {
            arr[i] = null;
          }
        }
    
        Node root = construct(arr);
        iterativeDFS(root);
	}
	
}

